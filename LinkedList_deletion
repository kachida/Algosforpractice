#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node * next;
};

void push(struct node ** headref, int data)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node -> data = data;
    new_node -> next = (*headref);
    (*headref) = new_node ; 
}

void insertAfter(struct node *prev_node, int data)
{
  if(prev_node == NULL)
  {
      printf("Previous Node Cannot be Null");
      return;
  }
  
  struct node *new_node = (struct node*)malloc(sizeof(struct node));
  new_node -> data = data;
  new_node -> next = prev_node -> next ;
  prev_node -> next = new_node;
  
}
void append(struct node **head_node, int data)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    struct node *last_node =  NULL;
    last_node = *head_node;
    new_node->data = data;
    new_node -> next = NULL;
    while(last_node -> next != NULL)
    {
        last_node = last_node ->next;
    }
    last_node -> next = new_node;
}
void printList(struct node *node)
{
    printf("\n");
    while(node != NULL)
    {
        printf("%d",node->data);
        printf("\n");
        node=node->next;
    }
}

void push1(struct node ** headref, int data)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node -> data = data;
    new_node -> next = (*headref);
    (*headref) = new_node ; 
}

int deleteList(struct node ** head_ref, int key)
{
    struct node *temp = *head_ref, *prev;
    if(temp !=  NULL && temp->data == key)
    {
        *head_ref = temp->next;
        free(temp);
        return;
    }
    
    while(temp != NULL && temp -> data != key)
    {
        prev = temp;
        temp = temp->next;
    }
    
    if(temp == NULL)
    return;
    
     prev -> next = temp -> next;
    free(temp);
    
}



int main(void) {
	// your code goes here
	struct node * head = NULL;
	push(&head,7);
	push(&head,1);
	push(&head,2);
	push(&head,3);
	push(&head,6);
	push(&head,8);
	push(&head,4);
	printf("created the list");
	printList(head);
	printf("After deleting the list");
	deleteList(&head,4);
	printList(head);
	return 0;
}

